remote repository
> back-up
> cooperation

git init 저장소이름: 지역저장소(자기가 커밋하는 곳) 생성
지역저장소와 연결되는 원격저장소 -- 서로 다른 컴퓨터와 연결
(부모 디렉토리에서) git init --bare 저장소이름
: 저장소로서의 기능만을 수행할 수 있는 저장소 생성, 작업 불가
git 저장소이름 add origin 경로
git push: 작업내용을 원격저장소로 밀어넣을 때

git clone 복제하려고하는_원격저장소_주소 저장할_디렉토리_이름

a. github -> repository 생성
b. git bash -> 버전관리할 디렉토리에서 git remote add origin 레포주소
                                                      (origin 이라고 별칭한다)
c. git remote: 확인용
d. git push -u origin 브랜치이름
(-u 로컬레포 원격레포 연결용으로 처음 한번만 사용)

secure shell(ssh)
ssh-keygen: 다른 컴퓨터로 접속할 수 있는 비밀번호 생성

깃헙 협업 시 참고 (pull&push)
https://blog.naver.com/soyfeliz729/223149246041
https://sabarada.tistory.com/75
https://docs.github.com/

2 tag
releases: 계속 바뀜 / tag: 항상 같음
tag: 시간이 지난 후에도 그 버전이 어떤 커밋에 해당되는지 알 수 있음
     특정한 커밋 아이디만을 가리킴
git tag [tag_name ex) 1.0.0] [branch]
annotated tag: 자세한 정보를 더 추가할 때 사용
ex) git tag -a 1.1.1 -m "bug fix" sybranch
git push --tag: transmit tag to server
git tag -d [tag_name]: delete tag
branch와 tag의 원리 내부 원리 동일,
tag는 commit_id를 branch는 checkout한 브랜치의 최신 commit_id 를 가리킴

병합하는 방법: merge vs rebase
master(기본브랜치)와 feature(파생브랜치)가 공통으로 가지고 있는 commit == base(feature 입장에서)
rebase: base를 바꾼다 -> feature가 파생된 master branch의 최신 커밋을 base로 바꾼다
git checkout feature
git rebase master
history가 일렬로 나아가기 때문에 보기에 쉽다 / rebase는 어렵고 위험
다른 사람과 공유하지 않은 커밋에 대해서만 rebase를 해야함
