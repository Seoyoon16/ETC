<vscode - github>

1. 처음 :
a. GitHub 웹사이트에서 새로운 레포지토리 생성
b. 로컬에서 작업하려는 디렉토리에서 터미널을 열고 git init 명령을 사용하여 Git을 초기화
c_1. 새로운 브랜치 생성: git branch <새 브랜치 이름>
c_2. 새로운 브랜치 생성 후 전환: git checkout -b <새 브랜치 이름>
d. 작업한 파일들을 스테이징하고 커밋하기 위해 git add .과 git commit -m "커밋 메시지" 명령 사용
e. GitHub 레포지토리의 주소를 복사하고, 로컬 레포지토리에 원격 저장소의 주소를 추가하기 위해
    git remote add origin <레포지토리_URL> 명령 사용
f. 변경사항을 GitHub 레포지토리에 푸시하기 위해 git push -u origin <브랜치> 명령 사용

2. 기존 레포에 수정본을 업데이트 :
a. 기존 레포지토리를 클론하거나 로컬에 이미 있는 작업 디렉토리로 이동 후
    git pull 하여 원격 저장소의 최신 변경 사항을 가져와서 로컬에 업데이트
b. 새 브랜치 생성하고, 해당 브랜치에서 작업
c. 변경한 파일들을 스테이징하고 커밋하기 위해 git add .과 git commit -m "커밋 메시지" 명령 사용
d. 변경 사항을 원격 저장소의 새로운 브랜치로 푸시하기 위해
    git push -u origin <새 브랜치 이름> 명령 사용
e. GitHub 웹사이트에서 해당 레포지토리로 이동하여
   새로운 브랜치에서 main 브랜치로의 풀 리퀘스트를 생성하여 변경 사항을 병합

+) 알아두면 좋은 Git 명령어들
git clone:
원격 저장소의 내용을 로컬에 복제합니다. 새로운 프로젝트를 시작할 때 주로 사용됩니다.

git add:
변경된 파일을 스테이징 영역에 추가합니다. 커밋할 준비를 위해 사용됩니다.

git commit:
스테이징 영역에 추가된 변경 사항을 커밋하여 로컬 저장소에 저장합니다.

git push:
로컬 저장소의 변경 사항을 원격 저장소로 업로드합니다. 다른 개발자와 작업을 공유하거나 백업을 만들 때 사용됩니다.

git pull:
원격 저장소의 변경 사항을 로컬로 가져와서 업데이트합니다. 다른 개발자가 작업한 내용을 가져오거나 로컬과 원격 저장소를 동기화할 때 사용됩니다.

git branch:
브랜치를 생성하거나 확인합니다. 다양한 작업을 분리하고 병합하기 위해 사용됩니다.

git checkout:
브랜치 간에 전환하거나 파일을 특정 커밋 상태로 복구합니다.

git merge:
브랜치의 변경 사항을 현재 브랜치로 병합합니다.

git status:
현재 작업 디렉토리의 상태를 확인합니다. 어떤 파일이 변경되었고 스테이징되었는지 등을 확인할 수 있습니다.

git log:
커밋 로그를 확인합니다. 이전 커밋들의 기록을 볼 수 있으며, 각 커밋의 해시, 작성자, 날짜 및 커밋 메시지 등을 확인할 수 있습니다.

git reset:
커밋을 취소하거나 변경 내용을 롤백합니다. 이전 상태로 돌아가고자 할 때 사용됩니다.

git revert:
특정 커밋의 변경 사항을 취소합니다. 이전 상태로 돌아가는 대신 새로운 커밋을 생성하여 변경 사항을 취소합니다.

git stash:
현재 작업 중인 변경 사항을 일시적으로 저장합니다. 변경 사항을 스태시에 잠시 보관하고 나중에 다시 적용할 수 있습니다.

git fetch:
원격 저장소의 최신 변경 사항을 로컬로 가져옵니다. 실제 변경 사항을 로컬에 적용하지는 않고, 단순히 최신 상태를 확인합니다.

git diff:
변경된 내용을 비교합니다. 현재 작업 디렉토리의 변경 사항이나 다른 커밋 간의 차이를 확인할 수 있습니다.

git remote:
원격 저장소를 관리합니다. 원격 저장소의 정보를 확인하거나 추가, 삭제할 때 사용됩니다.

git remote -v:
원격 저장소 확인

git tag:
특정 커밋을 가리키는 태그를 생성하거나 관리합니다. 주요 릴리스나 버전 등을 표시할 때 사용됩니다.